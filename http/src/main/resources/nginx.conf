# 设置nginx运行的用户
user  nginx;
# 设置nginx工作进程数目，一般设置为CPU核心数的2倍
worker_processes  2;
# nginx错误日志文件路径及级别为warn
error_log  /var/log/nginx/error.log warn;
# nginx进程pid文件路径
pid        /var/run/nginx.pid;
# nginx事件模块配置，包括worker_connections和use等属性
events {
    # 每个worker进程能够处理的最大连接数
    worker_connections  1024;
}
# nginx HTTP模块配置，包括server和upstream等属性
http {
    # 包含mime.types文件，设置默认文件类型为application/octet-stream
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    # nginx访问日志文件路径及格式为main
    access_log  /var/log/nginx/access.log  main;
    # 开启sendfile功能，提高文件传输效率。
    sendfile        on;
    # 设置keepalive连接的超时时间为65秒
    keepalive_timeout  65;
    # 配置HTTP服务器，监听80端口，指定example.com域名
    server {
        listen       80;
        server_name  example.com;
        # 配置根目录
        root   /usr/share/nginx/html;
        # 配置首页文件名
        index  index.html index.htm;
        # 配置location块，用于处理不同的请求
        location / {
            # 配置静态资源缓存时间为1天
            expires 1d;
            # 配置缓存的静态资源类型
            add_header Cache-Control public;
            # 配置gzip压缩
            gzip on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
            # 配置反向代理，将请求转发到http://backend.example.com
            proxy_pass http://backend.example.com;
        }
        # 配置location块，用于处理/api/路径下的请求
        location /api/ {
            # 配置反向代理，将请求转发到http://api.example.com
            proxy_pass http://api.example.com;
            # 配置HTTP请求头
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            # 配置缓存时间为1分钟
            expires 1m;
            # 配置缓存的静态资源类型
            add_header Cache-Control public;
            # 配置gzip压缩
            gzip on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        }
    }
    # 配置upstream块，用于负载均衡
    upstream backend {
        # 配置backend1服务器，并设置权重为5
        server backend1.example.com weight=5;
        # 配置backend2服务器
        server backend2.example.com;
        # 配置backend3服务器
        server backend3.example.com;
    }
}