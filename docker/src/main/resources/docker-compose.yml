version: "1.0"           # 声明版本
services:
  <service_name1>:       # 服务名称
    image: <image_name1> # 镜像名称/ID，如果本地不存在Compose会拉取镜像 　
    ports:               # 端口映射
      - <host_num>:<container_num>
    build: <path>        # 指定Dockerfile所在路径,Compose利用其构建镜像
    depends_on:          # 指定服务容器依赖，避免因为顺序导致启动失败的问题
      - <service_name2>  # Compose会先启动依赖的服务容器
      - <service_name3>
    volumes:
      - <container_path>             # 仅指定一个容器内路径，Compose会自动创建
      - <host_path>:<container_path> # 数据卷映射（挂载），以便于服务和数据持久化
    command: <command>               # 覆盖容器启动时执行的命令
    dns:                             # 指定DNS服务器
      - <dns_server1>
      - <dns_server2>
    environment:
      <var_name1>: <value1>          # 以对象（键值对）的形式表示，也可以以序列（-）形式表示
      <var_name2>: <value2>
    networks:                        # 加入指定的网络
      - <network_name1>
      - <network_name2>
    deploy:                          # 指定与部署和运行服务相关的配置
    mode: replicated                 # 默认为replicated，此时需要指定容器数量；如果为global，则为只有一个容器，不用再指定数量
    replicas: <num>                  # 指定容器数据量
    restart_policy:                  # 配置容器重启条件
      condition: on-failure
      delay: <sec>
      max_attempts: <num>
    update_config:                   # 配置容器更新服务
      parallelism: <num>
      delay: <sec>

  <service_name2>:
    image: <image_name2>　
    build:
      context: <context_path>        # 指定上下文路径
      dockerfile: <relative_path>    # 在上下文路径基础上指定相对路径
      args:
        <arg_name>: <value>          # 指定构建过程中环境变量，构建成功变量释放
    links:
      - <service_name1>              # 指定相关联的服务　　

networks:                            # 定义网络配置
  <network_name1>:
    driver: bridge
    config:
      - ipv4_address: <address>

  <network_name2>:
    driver: nat
      config:
          - ipv4_address: <address>